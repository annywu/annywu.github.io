[{"title":"ajax&http","date":"2017-08-08T14:23:47.000Z","path":"2017/08/08/前端面试题/","text":"原生ajax异步请求1、创建XmlHttpRequest对象1var request = new XMLHttpRequest(); 兼容IE6以下浏览器写法var request;if(window.XMLRequest){ request=new XMLRequestHttpRequest();//ie7\\ie8\\360等}else{ request = new ActiveXObject(‘Microsofe.XMLHTTP’);//ie5、ie6} 2、发送请求(1)open(method,url,async)method: GET/POST //发送方式url:请求地址async:true/false 默认true,表示异步(2)send(string)发送方式为GET时，request.send()发送方式为POST时，request.send(参数) 3、XMLHttpRequest取得响应(1)responseText:获得字符串形式的响应数据 (2)responseXML:获得xml形式的响应数据 (3)status和statusText：以数字和文本形式返回Http转态码 (4)getAllResponseHeader():获得所以得响应报头 (5)getResponseHeader():查询响应中的某个字段的值 (6)readState属性 “0”请求未初始化，open还未调用 “1”:服务器连接已经建立，open已调用 “2”:请求已接收，也就是接收到头信息了 “3”:请求处理中，也就是接收到响应主体了 “4”:请求已经完成，且响应就绪，响应完成了 12345678910111213var request;request.open(&quot;GET&quot;,&quot;getDate&quot;,true);request.send();//监听返回的转态，200和4代表响应成功request.onreadystatechange=function()&#123; if(request.readState==4&amp;&amp;request.status==200)&#123; //需要处理的事物 &#125;&#125; 跨域默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。 解决方法1、通过代理服务器在同源域名下架设一个代理服务器来转发，JavaScript负责把请求发送到代理服务器1&apos;/proxy?url=http://www.sina.com.cn&apos; 代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。 2、jsonp它有个限制，只能用GET请求，并且要求返回JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用JavaScript资源JSONP通常以函数调用的形式返回,数据以参数的形式返回所以我们需要在页面中准备回调函数function(data){ //数据处理}那么通过什么出发呢在页面上动态创建script标签，将请求的地址写入src中1234var js = document.createElement(&apos;script&apos;),head = document.getElementsByTagName(&apos;head&apos;)[0];js.src = &apos;http://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice&apos;;head.appendChild(js); 3、CORS(尚未补充) HTTP请求:是一种规则，无状态，无记忆 HTTP请求过程 （1）建立TCP连接 （2）web浏览器向web服务器发送请求指令 （3）web浏览器发送请求头信息 （4）web服务器应答 （5）web服务器发送应答头信息 （6）web服务器向浏览器发送数据 （7）web服务器关闭TCP连接 A、HTTP请求的4个·组成部分 a、HTTP请求方法或者动作(GET/POST) b、正在请求的URL c、请求头，包含客户环境信息、身份信息等 d、请求体（正文），包含客户提交的查询字符串信息、表单信息 B、POST和GET方法 GET:(1)用于信息获取 (2)使用URL传递参数 (3)String&lt;=2000个字符左右 POST:(1)用于修改服务器上的资源 (2)String&lt;=无穷大 C、一个HTTP响应由三个部分组成 a、一个数字和文字组成的转态码。作用：显示请求是否成功 b、响应头，包含服务器类型、日期、内容类型、长度等 c、响应体，即响应正文，字符串、HTML等 D、HTTP状态码由3个数字构成，其中首位数字定义了状态码的类型 1^^：信息类，表示收到web请求，正在进行处理中 2^^：成功，表示用户请求被正确接收、理解和处理，如200 3^^：重定向，表示请求未成功，客户必须采取动作 4^^：客户端错误，客户提交的信息有误，如400 found:意味着请求中所引用的文档不存在 5^^：服务器错误（最难处理的问题）,表示服务器不能完成请求处理，如500","tags":[]},{"title":"bootstrap兼容的一些tips","date":"2017-08-07T11:45:25.000Z","path":"2017/08/07/bootstrap兼容的一些tips/","text":"bootstrap兼容IE6/7/8写法bootstrap是一个非常好用的响应式框架，但bootstrap中的媒体查询@media是H5的新属性，这也导致了bootstrap只兼容ie9以上版本所以想要bootstrap兼容ie9以下，还需要做一些兼容处理 html5shiv.js用于解决IE9以下版本浏览器对HTML5新增标签不识别，并导致CSS不起作用的问题。项目地址 respond.js用于为 IE6-8 以及其它不支持 CSS3 Media Queries 的浏览器提供媒体查询的 min-width 和 max-width 特性，实现响应式网页设计（Responsive Web Design）。项目地址配合css hack使用，写在页面head中 123456&lt;!--[if lt IE 9]&gt; &lt;script src=&quot;http://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;&lt;![endif]—&gt; CSS hack在做兼容开发 css hack是必不可少的，css hack帮助我们让样式在不同的浏览器中呈现不同的样式，从而达到页面兼容浏览器。 条件注释法 12345678910111213141516171819&lt;--[if IE]&gt; 这段文字只在IE浏览器显示&lt;!endif--&gt;&lt;!--[if IE 6]&gt; 这段文字只在IE6浏览器显示&lt;![endif]--&gt; &lt;!--[if gte IE 6]&gt; 这段文字只在IE6以上(包括)版本IE浏览器显示&lt;![endif]--&gt; &lt;!--[if ! IE 8]&gt; 这段文字在非IE8浏览器显示&lt;![endif]--&gt;`&lt;!--[if !IE]&gt; 这段文字只在非IE浏览器显示&lt;![endif]--&gt; 属性前缀法 “-“减号是IE6专有的hack 写法：-color:#333; “”和“+”对IE6/IE7生效 写法：color:#eee; “\\9″ IE6/IE7/IE8/IE9/IE10都生效 “\\0″ IE8/IE9/IE10都生效，是IE8/9/10的hack “\\9\\0″ 只对IE9/IE10生效，是IE9/10的hack 更详细内容可参考百度百科","tags":[{"name":"bootstrap兼容","slug":"bootstrap兼容","permalink":"http://yoursite.com/tags/bootstrap兼容/"}]},{"title":"js常见的兼容写法","date":"2017-08-07T11:45:25.000Z","path":"2017/08/07/js常见兼容/","text":"###阻止事件冒泡 function stopEvent(event){ //阻止冒泡事件 //取消事件冒泡 var e=arguments.callee.caller.arguments[0]||event; //若省略此句，下面的e改为event，IE运行可以，但是其他浏览器就不兼容 if (e &amp;&amp; e.stopPropagation) { // this code is for Mozilla and Opera e.stopPropagation(); } else if (window.event) { // this code is for IE window.event.cancelBubble = true; } }","tags":[]},{"title":"多行文本溢出问题","date":"2017-07-30T13:09:17.387Z","path":"2017/07/30/多行文本溢出问题/","text":"单行文本溢出单行文本溢出我们都知道用text-overflow:ellipsis;属性来解决，部分浏览器需要加width来兼容。123overflow:hidden;text-overflow:ellipsis;white-space:nowrap; 多行文本溢出1.css属性设置（此处只有webkit内核适用）移动端多是webkit内核的，所以此方法适用于移动端12345overflow: hidden;text-overflow: ellipsis;display: -webkit-box;-webkit-line-clamp: 2;-webkit-box-orient: vertical; 2、使用伪类模拟“…”css代码如下123456789101112131415p &#123; position:relative; line-height:1.5em; height:4.5em; //高度正好是line-height的倍数 overflow:hidden;&#125;p:after &#123; content:&quot;...&quot;; font-weight:bold; position:absolute; bottom:0; right:0; padding:0 20px 0px 0; background:url(http://css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png) repeat-y;&#125; 但此方法加上去的省略号不够自然过度，网上给出的解决方案是在结束用了半透明的png做了缓冲效果，但颜色要与背景一致，才自然。并且要注意ie6-7不支持伪类，所以要兼容IE6-7需加入标签去模拟。 3、jquery查了一些资料，用js方式解决才是最完美的。1234567$(&quot;.figcaption&quot;).each(function(i)&#123; var divH = $(this).height(); var $p = $(&quot;p&quot;, $(this)).eq(0); while ($p.outerHeight() &gt; divH) &#123; $p.text($p.text().replace(/(\\s)*([a-zA-Z0-9]+|\\W)(\\.\\.\\.)?$/, &quot;...&quot;)); &#125;;&#125;); 这段代码的意思是通过从后向前逐个删除末尾字符，直至元素的高度小于父元素高度","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"Hello World","date":"2017-07-28T17:59:47.473Z","path":"2017/07/29/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]