<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>annywu</title>
  <subtitle>You can be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-05T15:26:15.434Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>annywu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cookies</title>
    <link href="http://yoursite.com/2017/09/05/cookies/"/>
    <id>http://yoursite.com/2017/09/05/cookies/</id>
    <published>2017-09-05T15:25:29.000Z</published>
    <updated>2017-09-05T15:26:15.434Z</updated>
    
    <content type="html"><![CDATA[<p>##cookie值中包含等号、空格、分号等特殊字符的处理<br>通过encodeURIComponent(URIstring)对URL进行编码<br>decodeURIComponent() 函数可对 encodeURIComponent() 函数编码的 URI 进行解码</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##cookie值中包含等号、空格、分号等特殊字符的处理&lt;br&gt;通过encodeURIComponent(URIstring)对URL进行编码&lt;br&gt;decodeURIComponent() 函数可对 encodeURIComponent() 函数编码的 URI 进行解码&lt;
    
    </summary>
    
    
      <category term="存储" scheme="http://yoursite.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>windows下node环境配置</title>
    <link href="http://yoursite.com/2017/08/16/node%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/08/16/node环境配置/</id>
    <published>2017-08-16T15:17:30.000Z</published>
    <updated>2017-11-08T15:30:38.744Z</updated>
    
    <content type="html"><![CDATA[<p>node下载有两种方式，一种是直接在官网上下载<a href="https://nodejs.org/en/download/" target="_blank" rel="external">node安装包</a>,像平常安装软件一样，点击next直至完成，简单粗暴。但是不利于node版本控制，同时也需要环境配置，这里不多说。我们看第二种配置。</p>
<h3 id="使用nvm下载node"><a href="#使用nvm下载node" class="headerlink" title="使用nvm下载node"></a>使用nvm下载node</h3><ul>
<li>首先要去下载<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="external">nvm包</a>，这里要注意需要翻墙，也可以在这里<a href="http://pan.baidu.com/s/1c24aAT6" target="_blank" rel="external">百度云</a>密码：27av下载。下载后解压到一个地方，比如C:\dev\nvm，这里可能要注意解压的姿势，在你要解压的地方右键解压到当前文件。</li>
<li><p>双击install.cmd 直接回车，成功后，会在C盘根目录生成一个setting.txt的文本文件，把这个文件剪切到C:\dev\nvm中，然后修改内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root:  C:\dev\nvm</div><div class="line">path:  C:\dev\nodejs</div><div class="line">arch: 64 //这里是系统64位，32的写32</div><div class="line">proxy: none</div></pre></td></tr></table></figure>
</li>
<li><p>如果没有生成setting文本文件，可手动增加</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3></li>
<li>右键点开电脑属性，高级系统配置-环境配置</li>
<li>在用户变量里，新建NVM_HOME和NVM_SYMLINK NVM_HOME的变量值为C:\dev\nvm;NVM_SYMLINK的变量值为：C:\dev\nodejs;</li>
<li>然后再path后面（注意用分号隔开）输入;%NVM_HOME%;%NVM_SYMLINK%;</li>
<li>如果path中已有C:\dev\nvm;和C:\dev\nodejs;请删除；</li>
<li>打开命令窗口输入 <code>nvm v</code> ,能够查到nvm的版本信息，那么我们安装成功。 </li>
</ul>
<h3 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h3><p>接下来我们可以安装node.js了</p>
<ul>
<li>输入命令 <code>nvm install latest</code> 可以安装最新的node版本</li>
<li>也可以直接选定版本安装 如<code>nvm install node版本号</code></li>
<li>如果你是第一次下载，在use之前，C:\dev目录下是没有nodejs这个文件夹的，在输入比如： nvm use 5.11.0 之后，你会发现，C:\dev目录下多了一个nodejs文件夹，这个文件夹不是单纯的文件夹，它是一个快捷方式，指向了 C:\dev\nvm 里的 v5.11.0 文件夹。</li>
<li>通过 <code>nvm use 版本号</code> ，可以实现版本切换</li>
<li>备注： 如果你的电脑系统是32 位的，那么在下载nodejs版本的时候，一定要指明 32 如： nvm install 5.11.0 32 这样在32位的电脑系统中，才可以使用，默认是64位的。</li>
</ul>
<h3 id="npm安装（包管理工具）"><a href="#npm安装（包管理工具）" class="headerlink" title="npm安装（包管理工具）"></a>npm安装（包管理工具）</h3><ul>
<li>在docs命令中输入 <code>npm install npm -g</code> 在C:\dev\nvm\npm目录中可以看到下载中的文件，以后我们只要用npm安装包的时候加上 <code>-g</code> 就可以把包安装在我们配置好的全局路径下了。</li>
<li>配置npm环境变量 NPM_HOME,变量值为：C:\dev\nvm\npm<br>*同上再path后面加入%NPM_HOME%,注意用分号隔开。</li>
</ul>
<p><em>至此node环境配置基本完成。
</em>在这里小编给大家提个醒，环境变量一定要配置成功，变量名可以自行定义注意区别，小编就因为这个踩过坑，在配置vue环境的时候，无论怎么装都是出现“找不到vue<br>*这个命令”，，明明node可以运行，vue也装了全局环境，后来重新去查看环境变量，发现npm的环境变量写成nvm的了，，所以环境变量一定要写清楚。    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;node下载有两种方式，一种是直接在官网上下载&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node安装包&lt;/a&gt;,像平常安装软件一样，点击next直至完成，简单粗暴。但是不
    
    </summary>
    
    
      <category term="环境配置" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>日常小笔记——严格模式下的限制</title>
    <link href="http://yoursite.com/2017/08/09/%E6%97%A5%E5%B8%B8%E5%B0%8F%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E9%99%90%E5%88%B6/"/>
    <id>http://yoursite.com/2017/08/09/日常小笔记——严格模式下的限制/</id>
    <published>2017-08-09T15:47:41.000Z</published>
    <updated>2017-08-09T15:57:02.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="“use-strict”"><a href="#“use-strict”" class="headerlink" title="“use strict”"></a>“use strict”</h2><p>“use strict” 声明js文件书写方式为严格模式，那么严格模式下游那些限制呢*</p>
<ul>
<li>变量必须声明后再使用</li>
<li>函数的参数不能有同名属性，否则报错</li>
<li>不能使用with语句</li>
<li>不能对只读属性赋值，否则报错</li>
<li>不能使用前缀0表示八进制，否则报错</li>
<li>不能删除变量delete prop,只能删除属性delete global[prop]</li>
<li>eval 不会再他的外层作用域引入变量</li>
<li>eval 和 arguments 不能被重新赋值</li>
<li>arguments 不会自动反映函数参数的变化</li>
<li>不能使用 arguments.callee</li>
<li>不能使用 arguments.caller</li>
<li>禁止this 指向全局对象</li>
<li>不能使用fn.caller 和fn.arguments获取函数调用的堆栈</li>
<li>增加了保留字（比如protected、static interface）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;“use-strict”&quot;&gt;&lt;a href=&quot;#“use-strict”&quot; class=&quot;headerlink&quot; title=&quot;“use strict”&quot;&gt;&lt;/a&gt;“use strict”&lt;/h2&gt;&lt;p&gt;“use strict” 声明js文件书写方式为严格模式，那
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ajax&amp;http</title>
    <link href="http://yoursite.com/2017/08/08/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/08/08/前端面试题/</id>
    <published>2017-08-08T14:23:47.000Z</published>
    <updated>2017-08-09T13:02:57.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原生ajax异步请求"><a href="#原生ajax异步请求" class="headerlink" title="原生ajax异步请求"></a>原生ajax异步请求</h3><h4 id="1、创建XmlHttpRequest对象"><a href="#1、创建XmlHttpRequest对象" class="headerlink" title="1、创建XmlHttpRequest对象"></a>1、创建XmlHttpRequest对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var request = new XMLHttpRequest();</div></pre></td></tr></table></figure>
<h4 id="兼容IE6以下浏览器写法"><a href="#兼容IE6以下浏览器写法" class="headerlink" title="兼容IE6以下浏览器写法"></a>兼容IE6以下浏览器写法</h4><p>var request;<br>if(window.XMLRequest){<br>    request=new XMLRequestHttpRequest();//ie7\ie8\360等<br>}else{<br>    request = new ActiveXObject(‘Microsofe.XMLHTTP’);//ie5、ie6<br>}</p>
<h4 id="2、发送请求"><a href="#2、发送请求" class="headerlink" title="2、发送请求"></a>2、发送请求</h4><p>(1)open(method,url,async)<br>method: GET/POST //发送方式<br>url:请求地址<br>async:true/false  默认true,表示异步<br>(2)send(string)<br>发送方式为GET时，request.send()<br>发送方式为POST时，request.send(参数)</p>
<h4 id="3、XMLHttpRequest取得响应"><a href="#3、XMLHttpRequest取得响应" class="headerlink" title="3、XMLHttpRequest取得响应"></a>3、XMLHttpRequest取得响应</h4><p>(1)responseText:获得字符串形式的响应数据</p>
<p>(2)responseXML:获得xml形式的响应数据</p>
<p>(3)status和statusText：以数字和文本形式返回Http转态码</p>
<p>(4)getAllResponseHeader():获得所以得响应报头</p>
<p>(5)getResponseHeader():查询响应中的某个字段的值</p>
<p>(6)readState属性</p>
<p>“0”请求未初始化，open还未调用</p>
<p>“1”:服务器连接已经建立，open已调用</p>
<p>“2”:请求已接收，也就是接收到头信息了</p>
<p>“3”:请求处理中，也就是接收到响应主体了</p>
<p>“4”:请求已经完成，且响应就绪，响应完成了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var  request;</div><div class="line"></div><div class="line">request.open(&quot;GET&quot;,&quot;getDate&quot;,true);</div><div class="line"></div><div class="line">request.send();</div><div class="line"></div><div class="line">//监听返回的转态，200和4代表响应成功</div><div class="line"></div><div class="line">request.onreadystatechange=function()&#123;</div><div class="line">	if(request.readState==4&amp;&amp;request.status==200)&#123;</div><div class="line">		//需要处理的事物</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。<br>完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</p>
<p>解决方法<br>1、通过代理服务器<br>在同源域名下架设一个代理服务器来转发，JavaScript负责把请求发送到代理服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;/proxy?url=http://www.sina.com.cn&apos;</div></pre></td></tr></table></figure></p>
<p>代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。</p>
<p>2、jsonp<br>它有个限制，只能用GET请求，并且要求返回JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用JavaScript资源<br>JSONP通常以函数调用的形式返回,数据以参数的形式返回<br>所以我们需要在页面中准备回调函数<br>function(data){<br>    //数据处理<br>}<br>那么通过什么出发呢<br>在页面上动态创建script标签，将请求的地址写入src中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var js = document.createElement(&apos;script&apos;),</div><div class="line">head = document.getElementsByTagName(&apos;head&apos;)[0];</div><div class="line">js.src = &apos;http://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice&apos;;</div><div class="line">head.appendChild(js);</div></pre></td></tr></table></figure></p>
<p>3、CORS(尚未补充)</p>
<h3 id="HTTP请求-是一种规则，无状态，无记忆"><a href="#HTTP请求-是一种规则，无状态，无记忆" class="headerlink" title="HTTP请求:是一种规则，无状态，无记忆"></a>HTTP请求:是一种规则，无状态，无记忆</h3><p>  HTTP请求过程</p>
<p>（1）建立TCP连接</p>
<p>（2）web浏览器向web服务器发送请求指令</p>
<p>（3）web浏览器发送请求头信息</p>
<p>（4）web服务器应答</p>
<p>（5）web服务器发送应答头信息</p>
<p>（6）web服务器向浏览器发送数据</p>
<p>（7）web服务器关闭TCP连接</p>
<p>A、HTTP请求的4个·组成部分</p>
<pre><code>a、HTTP请求方法或者动作(GET/POST)

 b、正在请求的URL

 c、请求头，包含客户环境信息、身份信息等

 d、请求体（正文），包含客户提交的查询字符串信息、表单信息
</code></pre><p>B、POST和GET方法</p>
<pre><code>GET:(1)用于信息获取

    (2)使用URL传递参数

    (3)String&lt;=2000个字符左右

POST:(1)用于修改服务器上的资源

     (2)String&lt;=无穷大
</code></pre><p>C、一个HTTP响应由三个部分组成</p>
<pre><code>a、一个数字和文字组成的转态码。作用：显示请求是否成功

b、响应头，包含服务器类型、日期、内容类型、长度等

c、响应体，即响应正文，字符串、HTML等
</code></pre><p>D、HTTP状态码由3个数字构成，其中首位数字定义了状态码的类型</p>
<pre><code>1^^：信息类，表示收到web请求，正在进行处理中

2^^：成功，表示用户请求被正确接收、理解和处理，如200

3^^：重定向，表示请求未成功，客户必须采取动作

4^^：客户端错误，客户提交的信息有误，如400

found:意味着请求中所引用的文档不存在

5^^：服务器错误（最难处理的问题）,表示服务器不能完成请求处理，如500
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原生ajax异步请求&quot;&gt;&lt;a href=&quot;#原生ajax异步请求&quot; class=&quot;headerlink&quot; title=&quot;原生ajax异步请求&quot;&gt;&lt;/a&gt;原生ajax异步请求&lt;/h3&gt;&lt;h4 id=&quot;1、创建XmlHttpRequest对象&quot;&gt;&lt;a href=&quot;#1
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js常见的兼容写法</title>
    <link href="http://yoursite.com/2017/08/07/js%E5%B8%B8%E8%A7%81%E5%85%BC%E5%AE%B9/"/>
    <id>http://yoursite.com/2017/08/07/js常见兼容/</id>
    <published>2017-08-07T11:45:25.000Z</published>
    <updated>2017-08-09T12:49:47.048Z</updated>
    
    <content type="html"><![CDATA[<p>###阻止事件冒泡<br> function stopEvent(event){ //阻止冒泡事件<br>     //取消事件冒泡<br>     var e=arguments.callee.caller.arguments[0]||event;<br>     //若省略此句，下面的e改为event，IE运行可以，但是其他浏览器就不兼容<br>     if (e &amp;&amp; e.stopPropagation) {<br>     // this code is for Mozilla and Opera<br>     e.stopPropagation();<br>     } else if (window.event) {<br>     // this code is for IE<br>      window.event.cancelBubble = true;<br>     }<br>   }</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###阻止事件冒泡&lt;br&gt; function stopEvent(event){ //阻止冒泡事件&lt;br&gt;     //取消事件冒泡&lt;br&gt;     var e=arguments.callee.caller.arguments[0]||event;&lt;br&gt;     //若
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bootstrap兼容的一些tips</title>
    <link href="http://yoursite.com/2017/08/07/bootstrap%E5%85%BC%E5%AE%B9%E7%9A%84%E4%B8%80%E4%BA%9Btips/"/>
    <id>http://yoursite.com/2017/08/07/bootstrap兼容的一些tips/</id>
    <published>2017-08-07T11:45:25.000Z</published>
    <updated>2017-08-09T12:59:07.563Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bootstrap兼容IE6-7-8写法"><a href="#bootstrap兼容IE6-7-8写法" class="headerlink" title="bootstrap兼容IE6/7/8写法"></a>bootstrap兼容IE6/7/8写法</h3><p>bootstrap是一个非常好用的响应式框架，但bootstrap中的媒体查询@media是H5的新属性，这也导致了bootstrap只兼容ie9以上版本<br>所以想要bootstrap兼容ie9以下，还需要做一些兼容处理</p>
<ul>
<li>html5shiv.js<br>用于解决IE9以下版本浏览器对HTML5新增标签不识别，并导致CSS不起作用的问题。<br><a href="https://github.com/aFarkas/html5shiv" target="_blank" rel="external">项目地址</a></li>
<li>respond.js<br>用于为 IE6-8 以及其它不支持 CSS3 Media Queries 的浏览器提供媒体查询的 min-width 和 max-width 特性，实现响应式网页设计（Responsive Web Design）。<br><a href="https://github.com/scottjehl/Respond" target="_blank" rel="external">项目地址</a><br>配合css hack使用，写在页面head中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lt IE 9]&gt; </div><div class="line"></div><div class="line">	&lt;script src=&quot;http://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt; </div><div class="line">	&lt;script src=&quot;http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;![endif]—&gt;</div></pre></td></tr></table></figure>
<h3 id="CSS-hack"><a href="#CSS-hack" class="headerlink" title="CSS hack"></a>CSS hack</h3><p>在做兼容开发 css hack是必不可少的，css hack帮助我们让样式在不同的浏览器中呈现不同的样式，从而达到页面兼容浏览器。</p>
<ol>
<li><p>条件注释法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;--[if IE]&gt;</div><div class="line">  这段文字只在IE浏览器显示</div><div class="line">&lt;!endif--&gt;</div><div class="line"></div><div class="line">&lt;!--[if IE 6]&gt;</div><div class="line">  这段文字只在IE6浏览器显示</div><div class="line">&lt;![endif]--&gt;</div><div class="line">	</div><div class="line">&lt;!--[if gte IE 6]&gt;</div><div class="line">  这段文字只在IE6以上(包括)版本IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div><div class="line">	</div><div class="line">&lt;!--[if ! IE 8]&gt;</div><div class="line">  这段文字在非IE8浏览器显示</div><div class="line">&lt;![endif]--&gt;</div><div class="line">`</div><div class="line">&lt;!--[if !IE]&gt;</div><div class="line">  这段文字只在非IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>属性前缀法</p>
</li>
</ol>
<ul>
<li>“-“减号是IE6专有的hack 写法：-color:#333;</li>
<li>“<em>”和“+”对IE6/IE7生效 写法：</em>color:#eee;</li>
<li>“\9″ IE6/IE7/IE8/IE9/IE10都生效</li>
<li>“\0″ IE8/IE9/IE10都生效，是IE8/9/10的hack</li>
<li>“\9\0″ 只对IE9/IE10生效，是IE9/10的hack</li>
</ul>
<p>更详细内容可参考<a href="https://baike.baidu.com/item/css%20hack/7026361?fr=aladdin" target="_blank" rel="external">百度百科</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;bootstrap兼容IE6-7-8写法&quot;&gt;&lt;a href=&quot;#bootstrap兼容IE6-7-8写法&quot; class=&quot;headerlink&quot; title=&quot;bootstrap兼容IE6/7/8写法&quot;&gt;&lt;/a&gt;bootstrap兼容IE6/7/8写法&lt;/h3&gt;&lt;
    
    </summary>
    
    
      <category term="bootstrap兼容" scheme="http://yoursite.com/tags/bootstrap%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>多行文本溢出问题</title>
    <link href="http://yoursite.com/2017/07/30/%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/07/30/多行文本溢出问题/</id>
    <published>2017-07-30T13:09:17.387Z</published>
    <updated>2017-07-31T09:40:26.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单行文本溢出"><a href="#单行文本溢出" class="headerlink" title="单行文本溢出"></a>单行文本溢出</h3><p>单行文本溢出我们都知道用text-overflow:ellipsis;属性来解决，部分浏览器需要加width来兼容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">overflow:hidden;</div><div class="line">text-overflow:ellipsis;</div><div class="line">white-space:nowrap;</div></pre></td></tr></table></figure></p>
<h3 id="多行文本溢出"><a href="#多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h3><h4 id="1-css属性设置（此处只有webkit内核适用）"><a href="#1-css属性设置（此处只有webkit内核适用）" class="headerlink" title="1.css属性设置（此处只有webkit内核适用）"></a>1.css属性设置（此处只有webkit内核适用）</h4><p>移动端多是webkit内核的，所以此方法适用于移动端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">overflow: hidden;</div><div class="line">text-overflow: ellipsis;</div><div class="line">display: -webkit-box;</div><div class="line">-webkit-line-clamp: 2;</div><div class="line">-webkit-box-orient: vertical;</div></pre></td></tr></table></figure></p>
<h4 id="2、使用伪类模拟“…”"><a href="#2、使用伪类模拟“…”" class="headerlink" title="2、使用伪类模拟“…”"></a>2、使用伪类模拟“…”</h4><p>css代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">    position:relative;</div><div class="line">    line-height:1.5em;</div><div class="line">    height:4.5em; //高度正好是line-height的倍数</div><div class="line">    overflow:hidden;</div><div class="line">&#125;</div><div class="line">p:after &#123;</div><div class="line">    content:&quot;...&quot;;</div><div class="line">    font-weight:bold;</div><div class="line">    position:absolute;</div><div class="line">    bottom:0;</div><div class="line">    right:0;</div><div class="line">    padding:0 20px 0px 0;</div><div class="line">    background:url(http://css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png) repeat-y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但此方法加上去的省略号不够自然过度，网上给出的解决方案是在结束用了半透明的png做了缓冲效果，但颜色要与背景一致，才自然。<br>并且要注意ie6-7不支持伪类，所以要兼容IE6-7需加入标签去模拟。</p>
<h4 id="3、jquery"><a href="#3、jquery" class="headerlink" title="3、jquery"></a>3、jquery</h4><p>查了一些资料，用js方式解决才是最完美的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(&quot;.figcaption&quot;).each(function(i)&#123;</div><div class="line">    var divH = $(this).height();</div><div class="line">    var $p = $(&quot;p&quot;, $(this)).eq(0);</div><div class="line">    while ($p.outerHeight() &gt; divH) &#123;</div><div class="line">        $p.text($p.text().replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, &quot;...&quot;));</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这段代码的意思是通过从后向前逐个删除末尾字符，直至元素的高度小于父元素高度</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单行文本溢出&quot;&gt;&lt;a href=&quot;#单行文本溢出&quot; class=&quot;headerlink&quot; title=&quot;单行文本溢出&quot;&gt;&lt;/a&gt;单行文本溢出&lt;/h3&gt;&lt;p&gt;单行文本溢出我们都知道用text-overflow:ellipsis;属性来解决，部分浏览器需要加width
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/29/hello-world/"/>
    <id>http://yoursite.com/2017/07/29/hello-world/</id>
    <published>2017-07-28T17:59:47.473Z</published>
    <updated>2017-07-28T17:59:47.476Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
